colnames(X1)[best.model.adjr2]
diabetes = read.csv("diabetes.csv")
head(diabetes)
# a
model1 = glm(diabetes ~. , data= diabetes)
?glm
dim(diabetes)
View(diabetes)
# a
model1 = glm(diabetes ~. , data= diabetes, family="binomial")
summary(model1)
diabetes = read.csv("diabetes.csv")
# a
model1 = glm(diabetes ~. , data= diabetes, family="binomial")
summary(model1)
# b
bi = stepwise(model1, direction="forward/backward", criterion="AIC")
back = stepwise(model1, direction="backward", criterion="AIC")
bi$iter
# b
bi = stepwise(model1, direction="forward/backward", criterion="AIC")
back = stepwise(model1, direction="backward", criterion="AIC")
air.pollution = read.csv("P320-1.txt", sep="\t")
head(air.pollution)
install.packages("MXM")
a1 = ridgereg.cv(target, air.pollution,K = 5, seed = T, lambda = seq(0, 1, by = 0.1))
require(MXM)
target = air.pollution$Y
a1 = ridgereg.cv(target, air.pollution,K = 5, seed = T, lambda = seq(0, 1, by = 0.1))
a1 = ridgereg.cv(target, air.pollution,K = 5, seed = T, lambda = seq(0, 1, by = 0.1))
install.packages("Rfast")
require(MXM)
head(air.pollution)
dim(air.pollution)
Xmat = as.matrix(air.pollution[,c(-16)])
Ymat = air.pollution$Y
ap.cv = cv.glmnet(Xmat, Ymat,alpha=0, nfold=5)
require(glmnet)
install.packages("glmnet")
require(glmnet)
air.pollution = read.csv("P320-1.txt", sep="\t")
set.seed(0)
Xmat = as.matrix(air.pollution[,c(-16)])
Ymat = air.pollution$Y
ap.cv = cv.glmnet(Xmat, Ymat,alpha=0, nfold=5)
plot(ap.cv)
ap.cv$lambda.min
coef(ap.cv, s = "lambda.min")
#b lasso regression
ap.lasso.cv = cv.glmnet(Xmat, Ymat, nfold =5)
plot(ap.lasso.cv)
ap.lasso.cv$lambda.min # minimum lambda
coef(ap.lasso.cv, s = "lambda.min")
knitr::opts_chunk$set(echo = TRUE)
data = read.csv("DriveShaft.txt")
head(data)
dim(data)
View(data)
data = read.csv("DriveShaft.txt", sep=" ")
dim(data)
View(data)
data = read.csv("DriveShaft.txt", sep=" ", header=F)
View(data)
data = data[,c(5,6,7,8,9)]
View(data)
data[,6] = colSums(data)
data[,6] = rowSums(data)
View(data)
data[,6] = rowMeans(data)
View(data)
54.6 + 73+ 139.2+55.4+52.6
374.8 / 5
data = read.csv("DriveShaft.txt", sep=" ", header=F)
dim(data)
data = data[,c(5,6,7,8,9)]
data[,6] = rowMeans(data)
data = data[,c(5,6,7,8,9)]
View(data)
data[,6] = rowSds(data)
require(cran)
require(matrixStats)
install.packages("matrixStats")
require(matrixStats)
data[,7] = rowSds(data)
transform(data, SD = apply(data, 1, sd))
transform(data, SD = apply(data[,c(1,2,3,4,5)], 1, sd))
data = read.csv("DriveShaft.txt", sep=" ", header=F)
dim(data)
require(matrixStats)
data = data[,c(5,6,7,8,9)]
transform(data, MEAN = apply(data[,c(1,2,3,4,5)], 1, mean))
transform(data, SD = apply(data[,c(1,2,3,4,5)], 1, sd))
transform(data, MEAN = apply(data[,c(1,2,3,4,5)], 1, mean))
transform(data, SD = apply(data[,c(1,2,3,4,5)], 2, sd))
data = transform(data, MEAN = apply(data[,c(1,2,3,4,5)], 1, mean))
transform(data, SD = apply(data[,c(1,2,3,4,5)], 1, sd))
# Calculate Location Factorial Effect
# Where A : LHLHLHLH, B : LLHHLLHH, C : LLLLHHHH
# ybar = Response
# ThreeWayFE returns Factorial Effect and label
ybar = runif(8)
FEres = ThreeWayFE(ybar,option=1)
ThreeWayFE = function(Resp, option = 1){
# Order : "A","B","C","AB","AC","BC","ABC"
# If Option ==1
# A : LHLHLHLH
# B : LLHHLLHH
# C : LLLLHHHH
# If Option ==2
# C : LHLHLHLH
# B : LLHHLLHH
# A : LLLLHHHH
X = gen.factorial(2,3)
if(option==1){colnames(X) <- LETTERS[1:3]}
if(option==2){colnames(X) <- LETTERS[3:1]}
FE = c(sum(X$A * Resp)/4,
sum(X$B * Resp)/4,
sum(X$C * Resp)/4,
sum(X$A * X$B * Resp)/4,
sum(X$A * X$C * Resp)/4,
sum(X$B * X$C * Resp)/4,
sum(X$A * X$B * X$C * Resp)/4)
FEID = c("A","B","C","AB","BC","AC","ABC")
return(list(FE,FEID))
}
# Calculate Location Factorial Effect
# Where A : LHLHLHLH, B : LLHHLLHH, C : LLLLHHHH
# ybar = Response
# ThreeWayFE returns Factorial Effect and label
ybar = runif(8)
FEres = ThreeWayFE(ybar,option=1)
FEres[[1]]
library(ggplot2)
# install.packages("AlgDesign")
library(AlgDesign)
install.packages("AlgDesign")
# Calculate Location Factorial Effect
# Where A : LHLHLHLH, B : LLHHLLHH, C : LLLLHHHH
# ybar = Response
# ThreeWayFE returns Factorial Effect and label
ybar = runif(8)
FEres = ThreeWayFE(ybar,option=1)
# install.packages("AlgDesign")
library(AlgDesign)
ThreeWayFE = function(Resp, option = 1){
# Order : "A","B","C","AB","AC","BC","ABC"
# If Option ==1
# A : LHLHLHLH
# B : LLHHLLHH
# C : LLLLHHHH
# If Option ==2
# C : LHLHLHLH
# B : LLHHLLHH
# A : LLLLHHHH
X = gen.factorial(2,3)
if(option==1){colnames(X) <- LETTERS[1:3]}
if(option==2){colnames(X) <- LETTERS[3:1]}
FE = c(sum(X$A * Resp)/4,
sum(X$B * Resp)/4,
sum(X$C * Resp)/4,
sum(X$A * X$B * Resp)/4,
sum(X$A * X$C * Resp)/4,
sum(X$B * X$C * Resp)/4,
sum(X$A * X$B * X$C * Resp)/4)
FEID = c("A","B","C","AB","BC","AC","ABC")
return(list(FE,FEID))
}
FEres = ThreeWayFE(ybar,option=1)
FEres[[1]]
FEres[[2]]
data = read.csv("DriveShaft.txt", sep=" ", header=F)
dim(data)
data = data[,c(5,6,7,8,9)]
data = transform(data, MEAN = apply(data[,c(1,2,3,4,5)], 1, mean))
# new transformed data
data = transform(data, SD = apply(data[,c(1,2,3,4,5)], 1, sd))
library(AlgDesign)
ThreeWayFE = function(Resp, option = 2){
X = gen.factorial(2,3)
if(option==1){colnames(X) <- LETTERS[1:3]}
if(option==2){colnames(X) <- LETTERS[3:1]}
FE = c(sum(X$A * Resp)/4,
sum(X$B * Resp)/4,
sum(X$C * Resp)/4,
sum(X$A * X$B * Resp)/4,
sum(X$A * X$C * Resp)/4,
sum(X$B * X$C * Resp)/4,
sum(X$A * X$B * X$C * Resp)/4)
FEID = c("A","B","C","AB","BC","AC","ABC")
return(list(FE,FEID))
}
HNplot = function(FactEff,FactId)
{
#Input = Vector
n = length(FactEff)
ind = order(abs(FactEff))
y = abs(FactEff[ind])
x = qnorm(0.5+0.5*(1:n-0.5)/n)
Names = FactId[ind]
dat = data.frame(x,y,names = FactId)
ggplot(dat,aes(x,y))+geom_point()+geom_text(aes(label = Names),hjust=-.3)
}
TLenth = function(FE){
#Order : "A","B","C","AB","AC","BC","ABC"
#Calculate s0
s0 = median(sort(abs(FE)))*1.5
#Consider abs(theta)<2.5*s0
ind = which(sort(abs(FE))<2.5*s0)
sort(abs(FE))[ind]
median(sort(abs(FE))[ind])
PSE = 1.5*median(sort(abs(FE))[ind])
#Pseudo-t
tpse = as.data.frame(round(FE/PSE,3))
rownames(tpse) = c("A","B","C","AB","AC","BC","ABC")
colnames(tpse) = c("tpse")
return(tpse)
}
FEres = ThreeWayFE(data[,6],option=2)
FEres[[1]]
FEres[[2]]
# Half Normal Plot
HNplot(FEres[[1]],FEres[[2]])
TLenth(FEres[[1]])
# summarize takes a tibble or data frame and simplifies it to one row.
summarise(flights, delay = mean(dep_delay, na.rm = TRUE))
flights %>% group_by(origin) %>% summarize(mean(arr_delay, na.rm = T))
library(dplyr)
#install.packages("nycflights13")
library(nycflights13)
library(ggplot2)
flights %>% group_by(origin) %>% summarize(mean(arr_delay, na.rm = T))
flights %>% group_by(origin) %>% summarize(mean(dep_delay, na.rm = T))
flights %>% group_by(origin) %>% summarize(mean(is.na(arr_delay)))
flights %>% group_by(origin) %>% summarize(mean(is.na(dep_delay)))
flights %>% group_by(origin) %>% summarize(mean(arr_delay + dep_delay, na.rm = T))
flights %>% filter(between(day, 23,26), month ==12) %>%
group_by(origin) %>% summarize(mean(arr_delay + dep_delay, na.rm = T))
# this line of code adds the departure date in a nice format
library(lubridate) # see Chapter 16 of r4ds!
# for now, don't worry about the syntax...
flightd = flights %>%
# select(year, month, day, hour, minute) %>%
mutate(departure = make_datetime(year, month, day, hour, minute))
flightd %>%
select(time_hour, departure)
flightd %>%
select(time_hour, departure)
flightd %>%
select(time_hour, departure)
flightd %>%
select(time_hour, departure)
# what is this next line doing?
flights %>% mutate(dayWeek = wday(time_hour)) %>%
group_by(dayWeek)%>% summarize(mean(arr_delay, na.rm = T)) %>%
plot
# what is this next line doing?
flights %>% mutate(dayWeek = wday(time_hour)) %>%
group_by(dayWeek)%>% summarize(mean(arr_delay, na.rm = T)) %>%
plot
summarise(flights, delay = mean(dep_delay, na.rm = TRUE))
d2 = summarise(flights, delay = mean(dep_delay, na.rm = TRUE))
d2
colnames(flights)
by_day <- group_by(flights, year, month, day)
by_day
by_day <- group_by(flights,origin)
by_day
##### Here are some examples without using %>% pipe:
delays = flights %>%
group_by(dest) %>%
summarise(
count = n(),
dist = mean(distance, na.rm=T),
delay = mean(arr_delay, na.rm = T)
) %>%
filter(count > 20, dest != "HNL")
delays
colnames(flights)
install.packages(c("maps", "mapproj"))
library(readr)
dat1 = read_csv("https://covidtracking.com/api/states/daily.csv")
dat1
dat2 = read_csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Confirmed.csv")
dat3 = read_csv("https://coronadatascraper.com/timeseries-tidy.csv")
dat3
dat1
shiny::runApp('private/courses/stat479-2/projects/COVID-19')
ls()
getwd()
rm(list=ls())
runApp('private/courses/stat479-2/projects/stat479-covid19-project')
runApp('private/courses/stat479-2/projects/stat479-covid19-project')
runApp('private/courses/stat479-2/projects/stat479-covid19-project')
?fluidPage
?titlePanel
runApp('private/courses/stat479-2/projects/stat479-covid19-project')
runApp('private/courses/stat479-2/projects/stat479-covid19-project')
state_centroids
library(shiny)
library(readr)
library(lubridate)
library(tidyverse)
library(dplyr)
library(plotly)
library(rsconnect)
library(ggplot2)
library(ggthemes)
library(maps)
library(usmap)
library(mapproj)
# THIS APP is deployed to Shinyapps.io
# Link: https://aiden-song.shinyapps.io/covid-19/
# reading data and processing it, data cleaning
dat1 = read.csv("https://covidtracking.com/api/states/daily.csv")
stay.at.home = read.csv("https://docs.google.com/spreadsheets/d/e/2PACX-1vTMb4QgSodTBkJW9o8t1MNbhamgSHJIIL8z2HIFaBoUHIx5gp4Avx4_4RoUR4X1KICtzX_PsVusvt_b/pub?gid=0&single=true&output=csv")
## Select the 5 most hit states: NY,NJ, CA, MI, MA
stay.at.home = stay.at.home %>%
mutate(stayHomeDate=parse_date_time(date, "mdy")) %>%
select(state, stayHomeDate, state.full)
data = dat1 %>% as_tibble() %>% mutate(date= parse_date_time(date, "ymd")) %>%
mutate(totalTest= total) %>%
mutate(state=as.factor(state)) %>%
select(date,state, positive, negative,death, hospitalized,totalTest)
data = left_join(data,stay.at.home,by = c("state", "state"))
# get a list of all the states available
state_list = unique(stay.at.home$state.full)
dateRange = data %>% summarise(min_date = min(date) , max_date = max(date))
min_date = dateRange$min_date;
max_date = dateRange$max_date;
summary_data = data %>% filter(date == max_date)
simpleCap <- function(x) {
s <- strsplit(x, " ")[[1]]
paste(toupper(substring(s, 1,1)), substring(s, 2),
sep="", collapse=" ")
}
my_map = map_data("state")
summary = summary_data %>% mutate(region=tolower(state.full))
state_population = statepop %>% mutate(region=tolower(full)) %>% select(region, pop_2015)
summary_map = left_join(my_map, summary, by="region")
summary_map = left_join(summary_map, state_population, by="region")
summary_map = summary_map %>%
mutate(tests.per.100k = (totalTest/pop_2015)*1000000) %>%
mutate(tests.per.100k = cut(tests.per.100k, c(0,10000,15000,20000,30000,1000000)))
state_centroids <- summarize(group_by( my_map, region),
x = mean(range(long)), y = mean(range(lat)))
names(state_centroids)[1] <- "state"
state_centroids$state = sapply(state,simpleCap)
state_centroids$state = sapply(state_centroids$state,simpleCap)
state_centroid
state_centroids
summary_map
?left_join
summary_map = left_join(summary_map, state_centroids, by=c("state.full" = "state"))
head(summary_map)
my_map = map_data("state")
summary = summary_data %>% mutate(region=tolower(state.full))
state_population = statepop %>% mutate(region=tolower(full)) %>% select(region, pop_2015)
summary_map = left_join(my_map, summary, by="region")
summary_map = left_join(summary_map, state_population, by="region")
summary_map = summary_map %>%
mutate(tests.per.100k.stats = (totalTest/pop_2015)*1000000) %>%
mutate(tests.per.100k = cut(tests.per.100k.stats, c(0,10000,15000,20000,30000,1000000)))
state_centroids <- summarize(group_by( my_map, region),
x = mean(range(long)), y = mean(range(lat)))
names(state_centroids)[1] <- "state"
state_centroids$state = sapply(state_centroids$state,simpleCap)
summary_map = left_join(summary_map, state_centroids, by=c("state.full" = "state"))
g = ggplot(summary_map)+
labs(title="Total Tests given per hundred thoudsands people") +
geom_polygon(aes(long, lat, group = group, fill =tests.per.100k ), col="#ecf0f1") +
geom_text(aes(x,y,label=paste(state,tests.per.100k.stats)), data=summary_map,size=2) +
ggthemes::theme_map() +
scale_fill_brewer(palette = "Reds", na.value = "gray")
g
state_centroids = left_join( state_centroids,summary_map, by=c("state" = "state.full")) %>%
select(x,y, state,tests.per.100k.stats)
state_centroids = left_join( state_centroids,summary_map, by=c("state" = "state.full"))
head(state_centroids)
state_centroids <- summarize(group_by( my_map, region),
x = mean(range(long)), y = mean(range(lat)))
names(state_centroids)[1] <- "state"
my_map = map_data("state")
summary = summary_data %>% mutate(region=tolower(state.full))
state_population = statepop %>% mutate(region=tolower(full)) %>% select(region, pop_2015)
summary_map = left_join(my_map, summary, by="region")
summary_map = left_join(summary_map, state_population, by="region")
summary_map = summary_map %>%
mutate(tests.per.100k.stats = (totalTest/pop_2015)*1000000) %>%
mutate(tests.per.100k = cut(tests.per.100k.stats, c(0,10000,15000,20000,30000,1000000)))
state_centroids <- summarize(group_by( my_map, region),
x = mean(range(long)), y = mean(range(lat)))
names(state_centroids)[1] <- "state"
state_centroids$state = sapply(state_centroids$state,simpleCap)
testsPer100 = summary_map %>% select(state.full, tests.per.100k.stats)
head(testsPer100)
testsPer100 = summary_map %>% select(state.full, tests.per.100k.stats) %>% distinct(state.full)
testsPer100
testsPer100 = summary_map %>% select(state.full, tests.per.100k.stats) %>% distinct()
testsPer100
state_centroids = left_join(state_centroids, testsPer100, by=c("state" = "state.full"))
state_centroids
g = ggplot(summary_map)+
labs(title="Total Tests given per hundred thoudsands people") +
geom_polygon(aes(long, lat, group = group, fill =tests.per.100k ), col="#ecf0f1") +
geom_text(aes(x,y,label=paste(state,tests.per.100k.stats)), data=summary_map,size=2) +
ggthemes::theme_map() +
scale_fill_brewer(palette = "Reds", na.value = "gray")
ggplotly(g)
g = ggplot(summary_map)+
labs(title="Total Tests given per hundred thoudsands people") +
geom_polygon(aes(long, lat, group = group, fill =tests.per.100k ), col="#ecf0f1") +
geom_text(aes(x,y,label=paste(state,tests.per.100k.stats)), data=state_centroids,size=2) +
ggthemes::theme_map() +
scale_fill_brewer(palette = "Reds", na.value = "gray")
ggplotly(g)
runApp('private/courses/stat479-2/projects/stat479-covid19-project')
g = ggplot(summary_map)+
labs(title="Total Tests given per hundred thoudsands people") +
geom_polygon(aes(long, lat, group = group, fill =tests.per.100k ), col="#ecf0f1") +
geom_text(aes(x,y,label=paste(state,"\n",tests.per.100k.stats)), data=state_centroids,size=2) +
ggthemes::theme_map() +
scale_fill_brewer(palette = "Reds", na.value = "gray")
ggplotly(g)
state_centroids <- summarize(group_by( my_map, region),
x = mean(range(long)), y = mean(range(lat)))
names(state_centroids)[1] <- "state"
state_centroids$state = sapply(state_centroids$state,simpleCap)
testsPer100 = summary_map %>% select(state.full, tests.per.100k.stats) %>% distinct()
state_centroids = left_join(state_centroids, testsPer100, by=c("state" = "state.full")) %>%
mutate(tests.per.100k.stats = round(tests.per.100k.stats,2))
g = ggplot(summary_map)+
labs(title="Total Tests given per hundred thoudsands people") +
geom_polygon(aes(long, lat, group = group, fill =tests.per.100k ), col="#ecf0f1") +
geom_text(aes(x,y,label=paste(state,"\n",tests.per.100k.stats)), data=state_centroids,size=2) +
ggthemes::theme_map() +
scale_fill_brewer(palette = "Reds", na.value = "gray")
ggplotly(g)
state_centroids = left_join(state_centroids, testsPer100, by=c("state" = "state.full")) %>%
mutate(tests.per.100k.stats = round(tests.per.100k.stats,0))
g = ggplot(summary_map)+
labs(title="Total Tests given per hundred thoudsands people") +
geom_polygon(aes(long, lat, group = group, fill =tests.per.100k ), col="#ecf0f1") +
geom_text(aes(x,y,label=state), data=state_centroids,size=2) +
geom_text(aes(x,y,label=paste("\n", tests.per.100k.stats)), data=state_centroids, size=1)+
ggthemes::theme_map() +
scale_fill_brewer(palette = "Reds", na.value = "gray")
ggplotly(g)
g = ggplot(summary_map)+
labs(title="Total Tests given per hundred thoudsands people") +
geom_polygon(aes(long, lat, group = group, fill =tests.per.100k ), col="#ecf0f1") +
geom_text(aes(x,y,label=state), data=state_centroids,size=2) +
geom_text(aes(x,y,label=paste("\n\n\n", tests.per.100k.stats)), data=state_centroids, size=1.5)+
ggthemes::theme_map() +
scale_fill_brewer(palette = "Reds", na.value = "gray")
ggplotly(g)
g = ggplot(summary_map)+
labs(title="Total Tests given per hundred thoudsands people") +
geom_polygon(aes(long, lat, group = group, fill =tests.per.100k ), col="#ecf0f1") +
geom_text(aes(x,y,label=state), data=state_centroids,size=2) +
geom_text(aes(x,y,label=paste("\n\n\n", tests.per.100k.stats)), data=state_centroids, size=1.7)+
ggthemes::theme_map() +
scale_fill_brewer(palette = "Reds", na.value = "gray")
ggplotly(g)
runApp('private/courses/stat479-2/projects/stat479-covid19-project')
my_map = map_data("state")
summary = summary_data %>% mutate(region=tolower(state.full))
state_population = statepop %>% mutate(region=tolower(full)) %>% select(region, pop_2015)
summary_map = left_join(my_map, summary, by="region")
summary_map = left_join(summary_map, state_population, by="region")
summary_map = summary_map %>%
mutate(infection.per.100k.stats = (positive/pop_2015)*1000000) %>%
mutate(infection.per.100k = cut(infection.per.100k, c(0, 500,1000,2500,10000,1000000)))
summary_map = summary_map %>%
mutate(infection.per.100k.stats = (positive/pop_2015)*1000000) %>%
mutate(infection.per.100k = cut(infection.per.100k.stats, c(0, 500,1000,2500,10000,1000000)))
state_centroids <- summarize(group_by( my_map, region),
x = mean(range(long)), y = mean(range(lat)))
names(state_centroids)[1] <- "state"
state_centroids$state = sapply(state,simpleCap)
confirmedPer100 = summary_map %>% select(state.full, infection.per.100k.stats) %>% distinct()
state_centroids = left_join(state_centroids, confirmedPer100, by=c("state" = "state.full")) %>%
mutate(infection.per.100k.stats = round(infection.per.100k.stats,0))
state_centroids$state = sapply(state_centroids$state,simpleCap)
confirmedPer100 = summary_map %>% select(state.full, infection.per.100k.stats) %>% distinct()
state_centroids = left_join(state_centroids, confirmedPer100, by=c("state" = "state.full")) %>%
mutate(infection.per.100k.stats = round(infection.per.100k.stats,0))
g = ggplot(summary_map)+ labs(title="Number of Confirmed Cases per hundred thoudsands people") +
geom_polygon(aes(long, lat, group = group, fill = infection.per.100k), col="#ecf0f1") +
geom_text(aes(x,y,label=state), data=state_centroids,size=2) +
geom_text(aes(x,y,label=paste("\n\n\n", infection.per.100k.stats)), data=state_centroids, size=1.7)+
ggthemes::theme_map() +
scale_fill_brewer(palette = "Reds", na.value = "gray")
ggplotly(g)
head(state_centroids)
head(summary_map)
confirmedPer100
state_centroids <- summarize(group_by( my_map, region),
x = mean(range(long)), y = mean(range(lat)))
names(state_centroids)[1] <- "state"
state_centroids$state = sapply(state_centroids$state,simpleCap)
confirmedPer100 = summary_map %>% select(state.full, infection.per.100k.stats) %>% distinct()
state_centroids = left_join(state_centroids, confirmedPer100, by=c("state" = "state.full")) %>%
mutate(infection.per.100k.stats = round(infection.per.100k.stats,0))
head(state_centroids)
g = ggplot(summary_map)+ labs(title="Number of Confirmed Cases per hundred thoudsands people") +
geom_polygon(aes(long, lat, group = group, fill = infection.per.100k), col="#ecf0f1") +
geom_text(aes(x,y,label=state), data=state_centroids,size=2) +
geom_text(aes(x,y,label=paste("\n\n\n", infection.per.100k.stats)), data=state_centroids, size=1.7)+
ggthemes::theme_map() +
scale_fill_brewer(palette = "Reds", na.value = "gray")
ggplotly(g)
runApp('private/courses/stat479-2/projects/stat479-covid19-project')
